#define USE_ROS_BRIDGE

using System;
using System.Collections;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using UnityEngine;
using UnityEngine.UI;
using REEL.PoseAnimation;
using REEL.D2E;
using REEL.D2EEditor;

#if (USE_ROS_BRIDGE)
using RosSharp.RosBridgeClient;
#endif

public class Arbitor : Singleton<Arbitor>
{
    class RobotMessage
    {
        private string messageType = string.Empty;      // facial / motion.
        private string message = string.Empty;          //  표정 or 모션 이름.

        public RobotMessage() { }
        public RobotMessage(string[] robotMessage)
        {
            SetMessage(robotMessage);
        }

        public string GetMessageType { get { return messageType; } }
        public string GetMessage { get { return message; } }

        public void SetMessage(string[] robotMessage)
        {
            messageType = robotMessage[0];
            message = robotMessage[1];
        }

        public override string ToString()
        {
            return "messageType: " + messageType + ", message: " + message;
        }
    }

    public GameObject RosConnector;

    public Toggle automaticExpression;
    public REEL.Animation.RobotFacialRenderer robotFacialRenderer;
    public bool runOnSimulator = true;

    List<string>[] ekman_facial = new List<string>[7];
    List<string>[] ekman_motion = new List<string>[7];


    Dictionary<string, Action<string>> messageProcessors = new Dictionary<string, Action<string>>();

    public void DirectMessage(String message)
    {
        if (message.Length > 0)
        {
            Mqtt.Instance.Send(Utils.TopicHeader + REEL.D2E.D2EConstants.TOPIC_TTS, message);
            StartCoroutine(Translator.Instance.Translate(message, result =>
            {
                Debug.Log("[Arbitor]Translation result " + result.ToString());
                StartCoroutine(SpeechEmotion.Instance.FigureOut(result, emotion_code =>
                {
                    Debug.Log("[Arbitor]Emotion is " + emotion_code);
                    Mqtt.Instance.Send(Utils.TopicHeader + REEL.D2E.D2EConstants.TOPIC_FACIAL, RunAutoGeneratedFacial(emotion_code));
                    Mqtt.Instance.Send(Utils.TopicHeader + REEL.D2E.D2EConstants.TOPIC_MOTION, RunAutoGeneratedMotion(emotion_code));
                }));
            }));
        }
    }

    public void PlayAutoGenEmotion(String speech)
    {
        if (speech.Length > 0)
        {
            StartCoroutine(Translator.Instance.Translate(speech, result =>
            {
                Debug.Log("[Arbitor]Translation result " + result.ToString());
                StartCoroutine(SpeechEmotion.Instance.FigureOut(result, emotion_code =>
                {
                    Debug.Log("[Arbitor]Emotion is " + emotion_code);
                    Mqtt.Instance.Send(Utils.TopicHeader + REEL.D2E.D2EConstants.TOPIC_FACIAL, RunAutoGeneratedFacial(emotion_code));
                    Mqtt.Instance.Send(Utils.TopicHeader + REEL.D2E.D2EConstants.TOPIC_MOTION, RunAutoGeneratedMotion(emotion_code));
                }));
            }));
        }
    }


    public string RunAutoGeneratedFacial(int emotion_id)
    {
        if (emotion_id < 0 || emotion_id > 6)
            return "";
        if (ekman_facial == null || ekman_facial[0] == null || ekman_motion == null || ekman_motion[0] == null)
        {
            Start();
        }

        int size = ekman_facial[emotion_id].Count;
        if (size > 0)
        {
            System.Random rnd = new System.Random();
            int index = rnd.Next(size);
            Arbitor.Instance.Insert(Utils.TopicHeader + "/facial", ekman_facial[emotion_id][index]);
            return ekman_facial[emotion_id][index];
        }
        return "";
    }
    public string RunAutoGeneratedMotion(int emotion_id)
    {
        if (emotion_id < 0 || emotion_id > 6)
            return "";
        if (ekman_facial == null || ekman_facial[0] == null || ekman_motion == null || ekman_motion[0] == null)
        {
            Start();
        }

        int size = ekman_motion[emotion_id].Count;
        if (size > 0)
        {
            System.Random rnd = new System.Random();
            int index = rnd.Next(size);
            Arbitor.Instance.Insert(Utils.TopicHeader + "/motion", ekman_motion[emotion_id][index]);
            return ekman_motion[emotion_id][index];
        }
        return "";
    }


    void Start()
    {
        SpeechRenderrer.Instance.Init();
        InitMessageProcessors();

        if (ekman_facial == null || ekman_facial[0] == null || ekman_motion == null || ekman_motion[0] == null)
        {
            // 0 = NORMAL
            ekman_facial[0] = new List<string>();
            ekman_facial[0].Add("gazeup");
            ekman_facial[0].Add("gazedown");
            ekman_facial[0].Add("gazeleft");
            ekman_facial[0].Add("gazeright");
            ekman_facial[0].Add("normal");
            ekman_facial[0].Add("speak");
            // 1 = ANGER
            ekman_facial[1] = new List<string>();
            ekman_facial[1].Add("angry");
            // 2 = DISGUST
            ekman_facial[2] = new List<string>();
            ekman_facial[2].Add("fear");
            ekman_facial[2].Add("sad");
            // 3 = FEAR
            ekman_facial[3] = new List<string>();
            ekman_facial[3].Add("fear");
            // 4 = JOY
            ekman_facial[4] = new List<string>();
            ekman_facial[4].Add("happy");
            ekman_facial[4].Add("smile");
            ekman_facial[4].Add("winkleft");
            ekman_facial[4].Add("winkright");
            // 5 = SADNESS
            ekman_facial[5] = new List<string>();
            ekman_facial[5].Add("sad");
            // 6 = SURPRISE
            ekman_facial[6] = new List<string>();
            ekman_facial[6].Add("surprised");

            // 0 = NORMAL
            ekman_motion[0] = new List<string>();
            ekman_motion[0].Add("THINKING");
            ekman_motion[0].Add("CURIOUS");
            // 1 = ANGER
            ekman_motion[1] = new List<string>();
            ekman_motion[1].Add("ANGRY");
            ekman_motion[1].Add("EXCITED");
            // 2 = DISGUST
            ekman_motion[2] = new List<string>();
            ekman_motion[2].Add("NO");
            // 3 = FEAR
            ekman_motion[3] = new List<string>();
            ekman_motion[3].Add("FEAR");
            // 4 = JOY
            ekman_motion[4] = new List<string>();
            ekman_motion[4].Add("YES");
            ekman_motion[4].Add("HAPPY");
            ekman_motion[4].Add("EXCITED");
            // 5 = SADNESS
            ekman_motion[5] = new List<string>();
            ekman_motion[5].Add("CONFUSED");
            ekman_motion[5].Add("NO");
            // 6 = SURPRISE
            ekman_motion[6] = new List<string>();
            ekman_motion[1].Add("ANGRY");
            ekman_motion[6].Add("EXCITED");
        }
    }

    private void Update()
    {
        try
        {
            string speech = SpeechRecognition.Instance.Result;
            if (speech.Length > 0)
            {
                SpeechRecognition.Instance.Clear();
                Debug.Log("[Arbitor]Speech: " + speech);
                Insert(Utils.TopicHeader + REEL.D2E.D2EConstants.TOPIC_INPUT, speech);
                if (runOnSimulator)
                {
                    LogWindow.Instance.PrintLog("VOICE", speech);
                }
            }
        }
        catch (Exception e)
        {
            Debug.Log(e.ToString());
        }
    }

    public void PlayMotionName(string motion_name)
    {
        Debug.Log("[Arbitor:PlayMotionName] " + motion_name);
#if (USE_ROS_BRIDGE)
        //MotionPublisher mot = RosConnector.GetComponentInChildren<MotionPublisher>();
        //mot.PlayMotionName(motion_name);
        MotionFileManager motionFileManager = FindObjectOfType<MotionFileManager>();
        if (motionFileManager != null)
        {
            if (motionFileManager.GetMotionData(motion_name, out MotionData motionData) == true)
            {
                string motionJson = JsonUtility.ToJson(motionData);
                MotionPublisher mot = RosConnector.GetComponentInChildren<MotionPublisher>();
                mot.PlayMotionRaw(motionJson);
                //Debug.Log("[Arbitor:PlayMotionName] PlayMotionRaw: " + motionJson);
            }
        }
        else
        {
            Debug.Log("[Arbitor:PlayMotionName] Can't find file");
        }
#endif
    }

    public void InitMessageProcessors()
    {
        messageProcessors.Clear();
        messageProcessors.Add(Utils.TopicHeader + D2EConstants.TOPIC_TTS, SpeechRenderrer.Instance.Play);
        messageProcessors.Add(Utils.TopicHeader + D2EConstants.TOPIC_FACIAL, robotFacialRenderer.Play);
        messageProcessors.Add(Utils.TopicHeader + D2EConstants.TOPIC_AUDIO, AudioPlayer.Instance.Command);
        if (runOnSimulator)
        {
            //messageProcessors.Add(Utils.TopicHeader + D2EConstants.TOPIC_MOTION, RobotTransformController.Instance.PlayMotion);

            RobotTransformController[] controllers = FindObjectsOfType<RobotTransformController>();
            Action<string> motionActions = null;
            foreach (var controller in controllers)
            {
                if (motionActions == null)
                {
                    motionActions = new Action<string>(controller.PlayMotion);
                    continue;
                }

                //Debug.Log("InitMessages");
                motionActions += controller.PlayMotion;
            }
            motionActions += PlayMotionName;

            messageProcessors.Add(Utils.TopicHeader + D2EConstants.TOPIC_MOTION, motionActions);
            
            //messageProcessors.Add(Utils.TopicHeader + D2EConstants.TOPIC_STATUS, SimulationManager.Instance.UpdateBlockStatus);
        }
        else
        {
#if UNITY_ANDROID || UNITY_IOS
            messageProcessors.Add(Utils.TopicHeader + D2EConstants.TOPIC_MOTION, MoccaHead.Instance.PlayMotion);
            messageProcessors.Add(Utils.TopicHeader + D2EConstants.TOPIC_MOBILITY, MoccaHead.Instance.MoveMobile);
#else
            messageProcessors.Add(Utils.TopicHeader + D2EConstants.TOPIC_MOTION, MoccaHead.Instance.PlayMotionName);
            //messageProcessors.Add(Utils.TopicHeader + D2EConstants.TOPIC_MOBILITY, MoccaHead.Instance.MoveMobile);
#endif
        }
    }

    public void Insert(string command)
    {

    }

    public void Insert(string topic, string message)
    {
        //Debug.Log("[Arbitor:Insert]" + topic + ", " + message);
        if (topic == Utils.TopicHeader + D2EConstants.TOPIC_TTS_FEEDBACK)
        {
            ProcessCommand(topic, message);
        }
        else
        {
            if (Utils.UseMQTTSend == 1)
            {
                if (Mqtt.Instance != null)
                {
                    Mqtt.Instance.Send(topic, message);
                }
            }
            if (Utils.UseMQTTFeedback == 0)
            {
                //Debug.Log("[Arbitor:Insert]ProcessCommand=>" + topic + ", " + message);
                ProcessCommand(topic, message);
            }
        }
    }

    public void Insert(Mqtt.MQTTMessage mqttMessage)
    {
        if (Utils.UseMQTTFeedback==1)
        {
            //_items.Add(item);
            if (mqttMessage == null)
                Debug.LogError("mqttMessage null !!!!!!!!!!!!");
            ProcessCommand(mqttMessage.topic, mqttMessage.message);
        }
    }

    void ProcessCommand(string topic, string command)
    {
        //Debug.Log("[Arbitor:ProcessCommand]" + topic + ", " + command);
        if (topic == (Utils.TopicHeader + D2EConstants.TOPIC_TTS_FEEDBACK))
        {
            Player.Instance.GetTtsFeedback(command);
        }
        else if (topic == (Utils.TopicHeader + D2EConstants.TOPIC_INPUT))
        {
            Player.Instance.GetInputEvent(command);
        }
        else
        {
            if (messageProcessors.TryGetValue(topic, out Action<string> processor))
            {
                //Debug.Log("[Arbitor:ProcessCmd]" + topic + ", " + command);
                processor(command);
            }
        }
    }

    public void OnUseMqttSendChanged(bool isOn)
    {
        Utils.UseMQTTSend = isOn ? 1 : 0;
    }

    public void OnUseMqttFeedBackChanged(bool isOn)
    {
        Utils.UseMQTTFeedback = isOn ? 1 : 0;
    }
}